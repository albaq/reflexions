How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    If the bug was introduced in the new file, the bug was introduced by the new changes.
    If the diff allows you to see the lines that have changed, so it will be easier to spot the bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    We can learn about previous made mistakes we don't want to make again.
    Could be that we delete a piece of code and we now want it back, so we don't need to code it again, which would introduce another errors in the code.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Cons: I could forget about committing and end up with a big commit, or worst, losing part of the job done.
    Pros: I won't end up with commits that don't compile for example. Or half commits that don't solve any problem.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    The different systems solve different problems. In the case of Google Docs, we want to track a single document, like a letter, that is not related to any other document at all.
    In the case of Git, we want to track related documents, because in the majority of the cases, when we program we modify more than one file.

How can you use the commands git log and git diff to view the history of files?

    We can execute git log, then choose the oldest and second oldest commit id. With this info, we could use the dit diff command like this.
    git diff oldest_commit_id second_oldest_commit_id 
    this is going to show us the changes between the first commit and the second.
    Then we could do our way up, executing the diff for the next oldest commit.

How might using version control make you more confident to make changes that
could break something?

    If a new change we developed introduces a bug, we can simply go back to the most statble version and averything will be back to normal. So this power gives us more confidence regarding introducing new features and changing old ones.

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here
